/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['git-contributors.js']) {
  _$jscoverage['git-contributors.js'] = [];
  _$jscoverage['git-contributors.js'][11] = 0;
  _$jscoverage['git-contributors.js'][15] = 0;
  _$jscoverage['git-contributors.js'][17] = 0;
  _$jscoverage['git-contributors.js'][18] = 0;
  _$jscoverage['git-contributors.js'][20] = 0;
  _$jscoverage['git-contributors.js'][21] = 0;
  _$jscoverage['git-contributors.js'][22] = 0;
  _$jscoverage['git-contributors.js'][24] = 0;
  _$jscoverage['git-contributors.js'][26] = 0;
  _$jscoverage['git-contributors.js'][31] = 0;
  _$jscoverage['git-contributors.js'][34] = 0;
  _$jscoverage['git-contributors.js'][35] = 0;
  _$jscoverage['git-contributors.js'][37] = 0;
  _$jscoverage['git-contributors.js'][39] = 0;
  _$jscoverage['git-contributors.js'][43] = 0;
  _$jscoverage['git-contributors.js'][45] = 0;
  _$jscoverage['git-contributors.js'][49] = 0;
  _$jscoverage['git-contributors.js'][53] = 0;
  _$jscoverage['git-contributors.js'][61] = 0;
  _$jscoverage['git-contributors.js'][62] = 0;
  _$jscoverage['git-contributors.js'][65] = 0;
  _$jscoverage['git-contributors.js'][67] = 0;
  _$jscoverage['git-contributors.js'][70] = 0;
  _$jscoverage['git-contributors.js'][71] = 0;
  _$jscoverage['git-contributors.js'][73] = 0;
  _$jscoverage['git-contributors.js'][74] = 0;
  _$jscoverage['git-contributors.js'][76] = 0;
  _$jscoverage['git-contributors.js'][77] = 0;
  _$jscoverage['git-contributors.js'][80] = 0;
  _$jscoverage['git-contributors.js'][81] = 0;
  _$jscoverage['git-contributors.js'][84] = 0;
  _$jscoverage['git-contributors.js'][85] = 0;
  _$jscoverage['git-contributors.js'][88] = 0;
  _$jscoverage['git-contributors.js'][90] = 0;
  _$jscoverage['git-contributors.js'][93] = 0;
  _$jscoverage['git-contributors.js'][94] = 0;
  _$jscoverage['git-contributors.js'][96] = 0;
  _$jscoverage['git-contributors.js'][98] = 0;
  _$jscoverage['git-contributors.js'][99] = 0;
  _$jscoverage['git-contributors.js'][102] = 0;
  _$jscoverage['git-contributors.js'][103] = 0;
  _$jscoverage['git-contributors.js'][106] = 0;
  _$jscoverage['git-contributors.js'][108] = 0;
  _$jscoverage['git-contributors.js'][113] = 0;
  _$jscoverage['git-contributors.js'][120] = 0;
  _$jscoverage['git-contributors.js'][122] = 0;
  _$jscoverage['git-contributors.js'][123] = 0;
  _$jscoverage['git-contributors.js'][125] = 0;
  _$jscoverage['git-contributors.js'][126] = 0;
  _$jscoverage['git-contributors.js'][128] = 0;
  _$jscoverage['git-contributors.js'][129] = 0;
  _$jscoverage['git-contributors.js'][132] = 0;
  _$jscoverage['git-contributors.js'][135] = 0;
  _$jscoverage['git-contributors.js'][142] = 0;
  _$jscoverage['git-contributors.js'][144] = 0;
  _$jscoverage['git-contributors.js'][148] = 0;
}
_$jscoverage['git-contributors.js'][11]++;
var fs = require("fs"), path = require("path"), git = require("../lib/gitlog"), _ = require("lodash");
_$jscoverage['git-contributors.js'][15]++;
var Q = require("q");
_$jscoverage['git-contributors.js'][17]++;
var verifyRepositoryExists = (function () {
  _$jscoverage['git-contributors.js'][18]++;
  "use strict";
  _$jscoverage['git-contributors.js'][20]++;
  var deferred = Q.defer();
  _$jscoverage['git-contributors.js'][21]++;
  var repo = path.join(program.cwd, ".git");
  _$jscoverage['git-contributors.js'][22]++;
  var ok = fs.existsSync(program.cwd) && fs.existsSync(repo);
  _$jscoverage['git-contributors.js'][24]++;
  if (ok) {
    _$jscoverage['git-contributors.js'][24]++;
    deferred.resolve(program);
  }
  else {
    _$jscoverage['git-contributors.js'][26]++;
    deferred.reject(new Error("Could not find .git repository at \"" + program.cwd + "\""));
  }
  _$jscoverage['git-contributors.js'][31]++;
  return deferred.promise;
});
_$jscoverage['git-contributors.js'][34]++;
var processLog = (function (stdout) {
  _$jscoverage['git-contributors.js'][35]++;
  "use strict";
  _$jscoverage['git-contributors.js'][37]++;
  var deferred = Q.defer();
  _$jscoverage['git-contributors.js'][39]++;
  var list, entries = _.compact(stdout.split("\n")), total = _.size(entries);
  _$jscoverage['git-contributors.js'][43]++;
  list = _.map(_.uniq(entries), (function (committer) {
  _$jscoverage['git-contributors.js'][45]++;
  var parts = committer.split(" "), email = _.last(parts), author = _.without(parts, email).join(" "), commits = _.size(_.filter(entries, (function (e) {
  _$jscoverage['git-contributors.js'][49]++;
  return e.indexOf(author) > -1 && e.indexOf(email) > -1;
}))), percentage = (commits / total * 100);
  _$jscoverage['git-contributors.js'][53]++;
  return ({commits: commits, name: author, email: email, percent: parseFloat(Math.max(0.1, percentage).toFixed(1), 10)});
}));
  _$jscoverage['git-contributors.js'][61]++;
  list = _.sortBy(list, (function (committer) {
  _$jscoverage['git-contributors.js'][62]++;
  return - committer.commits;
}));
  _$jscoverage['git-contributors.js'][65]++;
  deferred.resolve(list);
  _$jscoverage['git-contributors.js'][67]++;
  return deferred.promise;
});
_$jscoverage['git-contributors.js'][70]++;
var format = (function (data) {
  _$jscoverage['git-contributors.js'][71]++;
  "use strict";
  _$jscoverage['git-contributors.js'][73]++;
  var deferred = Q.defer();
  _$jscoverage['git-contributors.js'][74]++;
  var stringify = program.markdown === true && program.json === true;
  _$jscoverage['git-contributors.js'][76]++;
  if (program.markdown) {
    _$jscoverage['git-contributors.js'][77]++;
    data = require("../lib/markdown-reporter").format(data, program);
  }
  _$jscoverage['git-contributors.js'][80]++;
  if (stringify) {
    _$jscoverage['git-contributors.js'][81]++;
    data = data.split("\n");
  }
  _$jscoverage['git-contributors.js'][84]++;
  if (program.json === true) {
    _$jscoverage['git-contributors.js'][85]++;
    data = JSON.stringify(data);
  }
  _$jscoverage['git-contributors.js'][88]++;
  deferred.resolve(data);
  _$jscoverage['git-contributors.js'][90]++;
  return deferred.promise;
});
_$jscoverage['git-contributors.js'][93]++;
var filter = (function (data) {
  _$jscoverage['git-contributors.js'][94]++;
  "use strict";
  _$jscoverage['git-contributors.js'][96]++;
  var deferred = Q.defer();
  _$jscoverage['git-contributors.js'][98]++;
  var stripEmail = (function (el) {
  _$jscoverage['git-contributors.js'][99]++;
  return _.omit(el, "email");
});
  _$jscoverage['git-contributors.js'][102]++;
  if (program.email === false) {
    _$jscoverage['git-contributors.js'][103]++;
    data = _.map(data, stripEmail);
  }
  _$jscoverage['git-contributors.js'][106]++;
  deferred.resolve(data);
  _$jscoverage['git-contributors.js'][108]++;
  return deferred.promise;
});
_$jscoverage['git-contributors.js'][113]++;
var program = {timeout: 5000, cwd: ".", maxBuffer: 25600000};
_$jscoverage['git-contributors.js'][120]++;
var GitContributors = (function GitContributors() {
});
_$jscoverage['git-contributors.js'][122]++;
GitContributors.prototype.list = (function (opts, cb) {
  _$jscoverage['git-contributors.js'][123]++;
  "use strict";
  _$jscoverage['git-contributors.js'][125]++;
  program.markdown = null;
  _$jscoverage['git-contributors.js'][126]++;
  program.json = null;
  _$jscoverage['git-contributors.js'][128]++;
  if (_.isString(opts)) {
    _$jscoverage['git-contributors.js'][129]++;
    program.cwd = opts;
  }
  else {
    _$jscoverage['git-contributors.js'][132]++;
    program = _.merge(program, opts);
  }
  _$jscoverage['git-contributors.js'][135]++;
  Q().then(verifyRepositoryExists).then(git.log).then(processLog).then(filter).then(format).done((function (result) {
  _$jscoverage['git-contributors.js'][142]++;
  cb(null, result);
}), (function (err) {
  _$jscoverage['git-contributors.js'][144]++;
  cb(err, null);
}));
});
_$jscoverage['git-contributors.js'][148]++;
module.exports.GitContributors = new GitContributors();
_$jscoverage['git-contributors.js'].source = ["/*!"," * git-contributors (0.2.2) - 2015-06-08"," * https://github.com/davidlinse/git-contributors.js.git"," * Copyright (c) 2014 David Linse; License: MIT"," */","","/**"," * git-contributors module"," */","","var fs    = require('fs'),","    path  = require('path'),","    git   = require('../lib/gitlog'),","    _     = require('lodash');","var Q     = require('q');","","var verifyRepositoryExists = function() {","  'use strict';","","  var deferred = Q.defer();","  var repo     = path.join(program.cwd, '.git');","  var ok       = fs.existsSync(program.cwd) &amp;&amp; fs.existsSync(repo);","","  if (ok) { deferred.resolve(program); }","  else {","    deferred.reject(","      new Error('Could not find .git repository at \"'+ program.cwd +'\"')","    );","  }","","  return deferred.promise;","};","","var processLog = function(stdout) {","  'use strict';","","  var deferred = Q.defer();","","  var list,","      entries = _.compact(stdout.split('\\n')),","      total   = _.size(entries);","","  list = _.map(_.uniq(entries), function(committer) {","","    var parts   = committer.split(' '),","        email   = _.last(parts),","        author  = _.without(parts, email).join(' '),","        commits = _.size(_.filter(entries, function(e) {","          return e.indexOf(author) &gt; -1 &amp;&amp; e.indexOf(email) &gt; -1;","        })),","        percentage = (commits / total * 100);","","    return {","      commits: commits,","      name:    author,","      email:   email,","      percent: parseFloat(Math.max(0.1, percentage).toFixed(1), 10)","    };","  });","","  list = _.sortBy(list, function(committer) {","    return -committer.commits;","  });","","  deferred.resolve(list);","","  return deferred.promise;","};","","var format = function(data) {","  'use strict';","","  var deferred = Q.defer();","  var stringify = program.markdown === true &amp;&amp; program.json === true;","","  if (program.markdown) {","    data = require('../lib/markdown-reporter').format(data, program);","  }","","  if (stringify) {","    data = data.split('\\n');","  }","","  if (program.json === true) {","    data = JSON.stringify(data);","  }","","  deferred.resolve(data);","","  return deferred.promise;","};","","var filter = function(data) {","  'use strict';","","  var deferred = Q.defer();","","  var stripEmail = function(el) {","    return _.omit(el, 'email');","  };","","  if (program.email === false) {","    data = _.map(data, stripEmail);","  }","","  deferred.resolve(data);","","  return deferred.promise;","};","","//--","","var program = {","  timeout: 5000,","  cwd: '.',","  maxBuffer: 25000 * 1024","};","","","var GitContributors = function GitContributors () {};","","GitContributors.prototype.list = function(opts, cb) {","  'use strict';","","  program.markdown = null;","  program.json = null;","","  if (_.isString(opts)) {","    program.cwd = opts;","  }","  else {","    program = _.merge(program, opts);","  }","","  Q()","  .then(verifyRepositoryExists)","  .then(git.log)","  .then(processLog)","  .then(filter)","  .then(format)","  .done(function(result) {","    cb(null, result);","  }, function(err) {","    cb(err, null);","  });","};","","module.exports.GitContributors = new GitContributors();"];
