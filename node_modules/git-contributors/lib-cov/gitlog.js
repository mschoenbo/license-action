/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['gitlog.js']) {
  _$jscoverage['gitlog.js'] = [];
  _$jscoverage['gitlog.js'][13] = 0;
  _$jscoverage['gitlog.js'][14] = 0;
  _$jscoverage['gitlog.js'][16] = 0;
  _$jscoverage['gitlog.js'][19] = 0;
  _$jscoverage['gitlog.js'][21] = 0;
  _$jscoverage['gitlog.js'][23] = 0;
  _$jscoverage['gitlog.js'][25] = 0;
  _$jscoverage['gitlog.js'][26] = 0;
  _$jscoverage['gitlog.js'][27] = 0;
  _$jscoverage['gitlog.js'][30] = 0;
  _$jscoverage['gitlog.js'][34] = 0;
  _$jscoverage['gitlog.js'][38] = 0;
}
_$jscoverage['gitlog.js'][13]++;
var Q = require("q");
_$jscoverage['gitlog.js'][14]++;
var exec = require("child_process").exec;
_$jscoverage['gitlog.js'][16]++;
var git = {log: (function log(opts) {
  _$jscoverage['gitlog.js'][19]++;
  "use strict";
  _$jscoverage['gitlog.js'][21]++;
  var deferred = Q.defer();
  _$jscoverage['gitlog.js'][23]++;
  process.chdir(opts.cwd);
  _$jscoverage['gitlog.js'][25]++;
  exec("git log --pretty=\"%an %ae\"", opts, (function (err, stdout) {
  _$jscoverage['gitlog.js'][26]++;
  if (err) {
    _$jscoverage['gitlog.js'][27]++;
    deferred.reject(err);
  }
  else {
    _$jscoverage['gitlog.js'][30]++;
    deferred.resolve(stdout);
  }
}));
  _$jscoverage['gitlog.js'][34]++;
  return deferred.promise;
})};
_$jscoverage['gitlog.js'][38]++;
module.exports = git;
_$jscoverage['gitlog.js'].source = ["/*!"," * git-contributors (0.2.2) - 2015-06-08"," * https://github.com/davidlinse/git-contributors.js.git"," * Copyright (c) 2014 David Linse; License: MIT"," */","","/**"," * gitlog module"," */","","/* jshint indent:2 */","","var Q    = require('q');","var exec = require('child_process').exec;","","var git = {","","  log: function log (opts) {","    'use strict';","","    var deferred = Q.defer();","","    process.chdir(opts.cwd);","","    exec('git log --pretty=\"%an %ae\"', opts, function(err, stdout) {","      if (err) {","        deferred.reject(err);","      }","      else {","        deferred.resolve(stdout);","      }","    });","","    return deferred.promise;","  }","};","","module.exports = git;"];
