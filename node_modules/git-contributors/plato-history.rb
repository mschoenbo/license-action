#!/usr/bin/env ruby

# A helper script to generate a series of 'n' reports of
# javascript-complexity utilizing GIT and the NodeJS module 'plato'.
#
# The series starts from a fixed SHA1 (start of support in history)
# to the actual HEAD of the currently active branch. (decreasing resolution)
#
# NOTE: at the time of writing the html-report generated by 'plato'
# only includes the last 20 results so this script won't generate more.
#
# for plato see: @TODO: insert link here

# ruby     1.9.3+
# autor:   davidlinse (davidlinse@gmail.com)
# date:    2014/04/22
# version: 0.2.1



YODA = <<speaking

No, you don't want this script to run ..
back to work ..

speaking

# puts YODA
# exit 1

def get_inital_branch
  `git rev-parse --abbrev-ref HEAD`
end

def go_back_to_initial_branch
  `git checkout --force ${inital_branch}`
end


def checkout sha1
  # sha1, match = *msg.match(/([a-z0-9]){7}/)
  puts "Processing (#{$step}/#{$range}) .. "
  system "git checkout --force #{sha1}"
  puts 'Done'
end


def generate_report
  system "./node_modules/.bin/plato \
    -d reports/plato/ \
    --jshint ./.jshintrc \
    --recurse \
    ./lib"
end


def process commit
  sha1, match = *commit.match(/([a-z0-9]){7}/)
  checkout sha1
  generate_report
  $step += 1
end


## read, steady ..

support_plato_sha1 = ARGV[0] || '3e7f80f4dbf0d866122cefdc836c57e43f54c523'

commits_since_plato = `git log --oneline #{support_plato_sha1}..HEAD`

commits_since_plato =
  commits_since_plato.force_encoding('utf-8')
  .chomp!
  .split("\n")
  .to_a
  .reverse


$range = 20
$step  = 1
$rest  = 0


num_of_commits = commits_since_plato.size
step_range     = (num_of_commits / $range).to_i + 1
num_of_reports = num_of_commits/step_range


if num_of_reports > $range

  $rest       = num_of_commits % step_range
  step_range += 1

  puts ""
  puts "Total commits: #{num_of_commits} .."
  puts "Detected rest of #{$rest} .."
  puts "Increased 'step_range' from #{step_range-1} to #{step_range}"
end


num_of_commits = num_of_commits - $rest


puts ""
puts "Processing commits: #{num_of_commits} .."
puts "Generating #{num_of_commits/step_range} reports every #{step_range} commits .."
puts "Rest: #{$rest} .."
puts ""


## go!

inital_branch = get_inital_branch();

# (0..(num_of_commits - $rest)).step(step_range) { |index|

# $rest is already subtracted above .. !?
(0..num_of_commits).step(step_range) { |index|

  msg = commits_since_plato[index]

  process msg

  sleep 0.1
}

if $rest > 0
  puts "Processing rest .."
  process commits_since_plato.last
end

go_back_to_initial_branch()

# // taken with courtesy from:
# // http://stackoverflow.com/a/19178956/351423
# //
# def reshape(array, n){
#   return array.map(function(el, i)
#       return array.slice(i, i + n); if i % n === 0
# end
